#include "config.h"
#define SENSOR 27
#define BOMBA 32
AdafruitIO_Feed *MotorTCC = io.feed("MotorTCC");
AdafruitIO_Feed *totalMilliLitres = io.feed("Quantidade");
long currentMillis = 0;
long previousMillis = 0;
int interval = 1000;
boolean ledState = LOW;
float calibrationFactor = 4.5;
volatile byte pulseCount;
byte pulse1Sec = 0;
float flowRate;
unsigned int flowMilliLitres;
unsigned long totalMilliLitres;

void IRAM_ATTR pulseCounter()
{
  pulseCount++;
}

void setup() {
  
  pinMode(BOMBA, OUTPUT);
  Serial.begin(115200);
  while(! Serial);
  io.connect();
  MotorTCC->onMessage(handleMessage);
  Serial.println(io.statusText());
  MotorTCC->get();

  pinMode(SENSOR, INPUT_PULLUP);
  pulseCount = 0;
  flowRate = 0.0;
  flowMilliLitres = 0;
  totalMilliLitres = 0;
  previousMillis = 0;
  attachInterrupt(digitalPinToInterrupt(SENSOR), pulseCounter, FALLING);

}

void loop() {

  io.run();
  currentMillis = millis();
  if (currentMillis - previousMillis > interval) {
    pulse1Sec = pulseCount;
    pulseCount = 0;
    flowRate = ((1000.0 / (millis() - previousMillis)) * pulse1Sec) / calibrationFactor;
    previousMillis = millis();
    flowMilliLitres = (flowRate / 60) * 100;
    totalMilliLitres += flowMilliLitres;
    Serial.print("Fluxo de VazÃ£o: ");
    Serial.print(int(flowRate));  
    Serial.print("L/min");
    Serial.print("\t");       
    Serial.print("Quantidade de Liquido entrando: ");
    Serial.print(totalMilliLitres);
    Serial.print("mL / ");
    Serial.print(totalMilliLitres / 1000);
    Serial.println("L");
  }

}

void handleMessage(AdafruitIO_Data *data) {
  if(data->toPinLevel() == HIGH) {
    digitalWrite(BOMBA, HIGH);
  }
  else {
    digitalWrite(BOMBA, LOW);
  }
  digitalWrite(BOMBA, data->toPinLevel());
}
